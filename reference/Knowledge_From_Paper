论文积累

Sep 11th

1.TCP/IP:
	a. linux主机执行 netstat命令可以查询路由表  Flag位 G状态位表明这个路由是一个网关间接连接还是直接连接

2.Biscotti:
	a.PBFT 共识协议:
		PBFT协议将共识过程分为了5个阶段（如果不算与客户端交互的阶段，则可视为3个阶段）：
			Request阶段是客户端发送信息；
			在Pre-prepare阶段，主节点接到消息对其签名并分配一个唯一的序号n并将该消息发送给其他节点；
			Prepare阶段：所有备份节点收到主节点发来的PRE-PREPARE消息后，将一个包含当前视图号v、消息序号n、消息摘要的PREPARE信息发给所有其他节点。如果节点收到了2f个以上的PREPARE消息后则进入到下一阶段并且该消息处于Prepared状态;
			Commit阶段：每个节点广播一个保护当前视图号v、消息序号n的COMMIT消息。当节点收到2f个相同的COMMIT消息并且小于序号n的消息都已被执行，那么当前消息会被执行并被标记为Committed状态;
			Reply阶段：所有节点将执行结果返回给客户端。
	b.SGD (Stochastic gradient descent) 随机梯度下降算法:
		也不是那么高端，其实就是说每次随机挑取一个样本进行梯度下降，这样可能迭代次数变多，但是波动范围会稍微的增加使得更容易找到局部最小值
	c.VRFs (verifiable random functions) 可验证随机函数

Sep 12th
1.并行计算的一些性能指标
	1.1 工作负载：
		1.1.1 执行时间
		1.1.2 浮点运算数
		1.1.3 指令数目
	1.2 并行执行时间: T = 计算时间 + 进程时间 + 连接通信时间
	1.3 存储器的结构层次（通过三个指标来评定）：
		容量，延迟，带宽     计算公式 ：
2.关于通信开销的一些概念
	2.1  t(m)＝t0 ＋ｍ／r∞ 其中  t(m) 是m byte大小的信息所需要的通讯开销； t0是通道启动时间; r∞叫做渐进带宽

3.加速比性能定律
	3.1 Amdahl定律： S = 1/f 一个并行式处理系统的加速比 的极限 是串行代码比例的倒数
	3.2 Gustafson定律： 一个并行系统的加速比 和处理器数量成正线性关系
	3.3 Sun-Ni定律： 以上两种想法的一个归一化
对于通信密集的问题  加速比一般可以表示为一个函数 S = 1/c(p) 其中 c（p）是一个线性函数或者对数函数 有时候也会是超线性

4.关于算法的可扩放性
	4.1 可扩放性主要是针对于 处理器数量p 和 问题规模 W来确定的

/**
	以下是从零开始设计的过程，基于go语言和linux来进行搭建
**/

2019.9.21
	---关于go语言的网络框架
		选用Beego

go语言中 http包中 Serve函数的源码

func (srv *Server) Serve(l net.Listener) error {
    defer l.Close() //处理完以后一定要关闭这个listener
    if fn := testHookServerServe; fn != nil {
        fn(srv, l)
    }
    var tempDelay time.Duration // how long to sleep on accept failure

    if err := srv.setupHTTP2_Serve(); err != nil {
        return err
    }

    srv.trackListener(l, true)
    defer srv.trackListener(l, false)

    baseCtx := context.Background() // base is always background, per Issue 16220
    ctx := context.WithValue(baseCtx, ServerContextKey, srv)
    for {
        rw, e := l.Accept()
        if e != nil {
            select {
            case <-srv.getDoneChan():
                return ErrServerClosed
            default:
            }
            if ne, ok := e.(net.Error); ok && ne.Temporary() {
                if tempDelay == 0 {
                    tempDelay = 5 * time.Millisecond
                } else {
                    tempDelay *= 2
                }
                if max := 1 * time.Second; tempDelay > max {
                    tempDelay = max
                }
                srv.logf("http: Accept error: %v; retrying in %v", e, tempDelay)
                time.Sleep(tempDelay)
                continue
            }
            return e
        }
        tempDelay = 0
        c := srv.newConn(rw)
        c.setState(c.rwc, StateNew) // before Serve can return
        go c.serve(ctx)
    }
}


2019.9.23  linux主机搭建细节

1.go语言安装配置：https://blog.csdn.net/bawenmao/article/details/80217055
2.mysql的配置：https://www.jianshu.com/p/581aab472752  //可以先不配置
3.reddis的安装：https://redis.io/download
4.reddis的一些操作：
	set key value 设置一个键值对
	expire key int  让这个键在数据库中存活int的时间
	redis中 List的操作：
		Rpush list value 往list最后面面放一个值
		Lpush list value 往list最前面放一个值
		Lrange list start end  查询list中这个区间段
		LLEN 查询list长度
		LPOP 弹出开头的一个
		RPOP 弹出末尾的一个

	redis中 set的操作：
		SADD adds the given value to the set.
		SREM removes the given value from the set.
		SISMEMBER tests if the given value is in the set. It returns 1 if the value is there and 0 if it is not.
		SMEMBERS returns a list of all the members of this set.
		SUNION combines two or more sets and returns the list of all elements.

		对于set而言，其本身性质属于无顺序的类型 当我们想要对其排序就需要用以下形式来进行添加：
		https://www.runoob.com/redis/redis-sorted-sets.html

	redis中 Hahses的操作：
		Hset key name value  设置一个字段
		Hmset key name1 value1 name2 value2 name3 value3...  一次性设置多个字段
		Hget key name 获取一个字段
		Hgetall key 过去这个key对应所有字段信息
5.reddis在go中使用的驱动：需要git  https://github.com/gomodule/redigo
	首先要在linux上下载相应支持： go get github.com/garyburd/redigo/redis
	然后在程序中调用即可

Sep 30th
    1.有几个之前的技术概念，都是用来将机器学习并行化运行的：
        1.cyclic delay:
            从 Slow learners are fast这篇文章中得知一下知识点：
                online learning是一个很好的概念但是目前的情况是，硬盘存储的读写速度跟不上cpu处理器的处理速度，
                并且大部分的学习过程都是基于串行的，使得多核cpu的工作模式没有被完全利用
        构造一种有延迟的模型，将复杂函数分为n个节点，分别进行运算，再把结果放在一起，使得针对于每个节点来说
        其实计算梯度都是在本地完成的。

    2.关于rpc的一些知识：
        A.rpc的大致过程
            1.	client调用client	stub，这是一次本地过程调用
            2.	client	stub将参数打包成一个消息，然后发送这个消息。打包过程也叫做	marshalling
            3.	client所在的系统将消息发送给server
            4.	server的的系统将收到的包传给server	stub
            5.	server	stub解包得到参数。	解包也被称作	unmarshalling
            6.	最后server	stub调用服务过程.	返回结果按照相反的步骤传给client
        B.rpcx框架:
            是一个分布式的Go语言的	RPC	框架，支持 Zookepper、etcd、consul多种服务发现方式，
            多种服务路由方式,是目前性能最好的	RPC	框架之一。
            服务器rpcx的起步配置

Oct 3rd
    federated machine learning摘要
    1.fed learning的保障隐私的三种技术：
        (1)SMC，安全多方计算，跟零知识证明的概念比较类似，在不涉及隐私数据的前提下实现安全的不依赖于第三方的计算。
        (2)Differential Privacy，差分隐私。简单来说就是在数据集中加入噪声，使得对于任意两份查询结果是接近于不可区分的。
        使确定的输出结构以概率的方式呈现，可以理解为以一定的概率说假话，需要从精确度和隐私性之间做权衡。
        (3)Homomorphic Encryption，同态加密。就是可以从密文信息中得到一些有用的信息，但是原文的敏感信息被隐藏起来。目前
        还在理论阶段。
    2.fed learning的三种结构：
        (1)Horizontal fed learning。数据集的特征空间相同，但是不同数据集的交集很小。
        (2)Vertical fed learning。不同数据集有很大一部分是来自于同一批样本的，但是特征空间不相同。
        (3)fed transfer learning。不仅不同数据集的交集很小，而且特征空间也不相同。它是对现存的fed learning系统的推广。
    3.具体步骤
        (1)Horizontal
        1.节点在本地计算完梯度后，用一些技术例如加密、差分隐私或者秘密共享等等掩盖梯度信息，然后把结果发给server。
        2.server将收到的信息聚合起来。
        3.server将处理过的结果发送给各个节点。
        4.节点将收到的结果解密后在本地进行梯度更新。

        (2)Vertical
        企业A、B需要共同训练一份模型，B同时拥有该模型需要预测的标签数据。C是它们的合作者。
        1.C生成密钥对，把公钥发送给A和B。
        2.A和B得到本地的梯度和损失函数后，对它们进行加密，然后交换。
        3.A和B对收到的加密梯度值进行计算，然后再对结果进行隐私处理(mask)；B同时还需要计算损失函数。最后A、B把加密数据发送给C。
        4.C解密后将梯度值和损失函数值发送给A和B，A和B收到后对这些值进行处理(unmask)，然后在本地进行参数更新。
    4.其他
        1.以上结构不仅考虑到了隐私信息的保护，还使得贡献较多数据的节点能够获得奖励，实现了激励机制。
        2.federated learning和distributed learning的区别在于在后者中，存在一个parameter server存储数据，分配数据和计算资源
        到各个工作节点上，即这些节点要受到中央节点的管控。但是fed learning中每个节点对自己的数据拥有绝对的管理权，因此更加复杂。
        而且，fed learning更加强调隐私性。

    python grpc：
        1.在.proto文件中第一句话写上syntax = "proto3",然后定义消息类型，它是一种数据结构，例如定义一个Number消息
        message Number {
            float value = 1;
        }
        指明了value的类型为浮点数，1是它在消息中的序号。如果还要加其他属性，可以=2，=3这样下去。可以定义多个消息和服务。
        然后定义服务，
        service Calculate {
            rpc Square(Number) returns (Number) {}
        }
        这是最简单的一种函数，客户端传Number消息，服务端返回Number消息。
        还有其他类型的函数，
            rpc Square(stream Number) returns (Number) {}，输入为Number流，返回单个Number
            rpc Square(Number) returns (stream Number) {}，输入为单个Number，返回Number流
            rpc Square(stream Number) returns (stream Number) {}，输入和返回都是Number流
        至此最简单的proto文件已经生成，一般将proto文件放在protos目录下。在上层目录控制台下输入
        python -m grpc_tools.protoc -I./protos --python_out=. --grpc_python_out=. ./protos/calculate.proto
        -I参数后面是proto文件所在的目录，--python_out和--grpc_python_out指定生成的模板文件存放在哪里，一般指定为.即可。
        最后加上proto文件的路径。
        然后会自动生成caculate_pb2.py和caculate_pb2_grpc.py文件，不用对他们进行修改。

        2.编写client代码
        将自动生成的两个模板文件import进来，然后定义一个run函数，
        def run():
            with grpc.insecure_channel('localhost:7777') as channel:
                stub = calculate_pb2_grpc.CalculateStub(channel)
                for _ in range(10):
                    i = calculate_pb2.Number(value=random.random()*10)
                    print(stub.Square(i).value)
        通过channel连接上服务器地址，然后通过calculate_pb2_grpc中的相应方法生成Stub本地类，这个类拥有在proto文件中定义的
        函数Square。

        3.编写server代码
        首先需要从calculate_pb2_grpc中继承类calculate_pb2_grpc.CalculateServicer
        class CaculateServicer(calculate_pb2_grpc.CalculateServicer):
            def Square(self, request, context):
                return calculate_pb2.Number(value=pow(request.value, 2))
        在这个类中实现proto文件中定义的服务函数。
        def server():
            server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
            calculate_pb2_grpc.add_CalculateServicer_to_server(
                CaculateServicer(), server
            )
            server.add_insecure_port("[::]:7777")
            server.start()
            server.wait_for_termination()
        这段代码开启服务