论文积累

Sep 11th

1.TCP/IP:
	a. linux主机执行 netstat命令可以查询路由表  Flag位 G状态位表明这个路由是一个网关间接连接还是直接连接

2.Biscotti:
	a.PBFT 共识协议:
		PBFT协议将共识过程分为了5个阶段（如果不算与客户端交互的阶段，则可视为3个阶段）：
			Request阶段是客户端发送信息；
			在Pre-prepare阶段，主节点接到消息对其签名并分配一个唯一的序号n并将该消息发送给其他节点；
			Prepare阶段：所有备份节点收到主节点发来的PRE-PREPARE消息后，将一个包含当前视图号v、消息序号n、消息摘要的PREPARE信息发给所有其他节点。如果节点收到了2f个以上的PREPARE消息后则进入到下一阶段并且该消息处于Prepared状态;
			Commit阶段：每个节点广播一个保护当前视图号v、消息序号n的COMMIT消息。当节点收到2f个相同的COMMIT消息并且小于序号n的消息都已被执行，那么当前消息会被执行并被标记为Committed状态;
			Reply阶段：所有节点将执行结果返回给客户端。
	b.SGD (Stochastic gradient descent) 随机梯度下降算法:
		也不是那么高端，其实就是说每次随机挑取一个样本进行梯度下降，这样可能迭代次数变多，但是波动范围会稍微的增加使得更容易找到局部最小值
	c.VRFs (verifiable random functions) 可验证随机函数

Sep 12th
1.并行计算的一些性能指标
	1.1 工作负载：
		1.1.1 执行时间
		1.1.2 浮点运算数
		1.1.3 指令数目
	1.2 并行执行时间: T = 计算时间 + 进程时间 + 连接通信时间
	1.3 存储器的结构层次（通过三个指标来评定）：
		容量，延迟，带宽     计算公式 ：
2.关于通信开销的一些概念
	2.1  t(m)＝t0 ＋ｍ／r∞ 其中  t(m) 是m byte大小的信息所需要的通讯开销； t0是通道启动时间; r∞叫做渐进带宽

3.加速比性能定律
	3.1 Amdahl定律： S = 1/f 一个并行式处理系统的加速比 的极限 是串行代码比例的倒数
	3.2 Gustafson定律： 一个并行系统的加速比 和处理器数量成正线性关系
	3.3 Sun-Ni定律： 以上两种想法的一个归一化
对于通信密集的问题  加速比一般可以表示为一个函数 S = 1/c(p) 其中 c（p）是一个线性函数或者对数函数 有时候也会是超线性

4.关于算法的可扩放性
	4.1 可扩放性主要是针对于 处理器数量p 和 问题规模 W来确定的

/**
	以下是从零开始设计的过程，基于go语言和linux来进行搭建
**/

2019.9.21
	---关于go语言的网络框架
		选用Beego

go语言中 http包中 Serve函数的源码

func (srv *Server) Serve(l net.Listener) error {
    defer l.Close() //处理完以后一定要关闭这个listener
    if fn := testHookServerServe; fn != nil {
        fn(srv, l)
    }
    var tempDelay time.Duration // how long to sleep on accept failure

    if err := srv.setupHTTP2_Serve(); err != nil {
        return err
    }

    srv.trackListener(l, true)
    defer srv.trackListener(l, false)

    baseCtx := context.Background() // base is always background, per Issue 16220
    ctx := context.WithValue(baseCtx, ServerContextKey, srv)
    for {
        rw, e := l.Accept()
        if e != nil {
            select {
            case <-srv.getDoneChan():
                return ErrServerClosed
            default:
            }
            if ne, ok := e.(net.Error); ok && ne.Temporary() {
                if tempDelay == 0 {
                    tempDelay = 5 * time.Millisecond
                } else {
                    tempDelay *= 2
                }
                if max := 1 * time.Second; tempDelay > max {
                    tempDelay = max
                }
                srv.logf("http: Accept error: %v; retrying in %v", e, tempDelay)
                time.Sleep(tempDelay)
                continue
            }
            return e
        }
        tempDelay = 0
        c := srv.newConn(rw)
        c.setState(c.rwc, StateNew) // before Serve can return
        go c.serve(ctx)
    }
}


2019.9.23  linux主机搭建细节

1.go语言安装配置：https://blog.csdn.net/bawenmao/article/details/80217055
2.mysql的配置：https://www.jianshu.com/p/581aab472752  //可以先不配置
3.reddis的安装：https://redis.io/download
4.reddis的一些操作：
	set key value 设置一个键值对
	expire key int  让这个键在数据库中存活int的时间
	redis中 List的操作：
		Rpush list value 往list最后面面放一个值
		Lpush list value 往list最前面放一个值
		Lrange list start end  查询list中这个区间段
		LLEN 查询list长度
		LPOP 弹出开头的一个
		RPOP 弹出末尾的一个

	redis中 set的操作：
		SADD adds the given value to the set.
		SREM removes the given value from the set.
		SISMEMBER tests if the given value is in the set. It returns 1 if the value is there and 0 if it is not.
		SMEMBERS returns a list of all the members of this set.
		SUNION combines two or more sets and returns the list of all elements.

		对于set而言，其本身性质属于无顺序的类型 当我们想要对其排序就需要用以下形式来进行添加：
		https://www.runoob.com/redis/redis-sorted-sets.html

	redis中 Hahses的操作：
		Hset key name value  设置一个字段
		Hmset key name1 value1 name2 value2 name3 value3...  一次性设置多个字段
		Hget key name 获取一个字段
		Hgetall key 过去这个key对应所有字段信息
5.reddis在go中使用的驱动：需要git  https://github.com/gomodule/redigo
	首先要在linux上下载相应支持： go get github.com/garyburd/redigo/redis
	然后在程序中调用即可